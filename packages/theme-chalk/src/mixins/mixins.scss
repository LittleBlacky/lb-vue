@use "config" as *;
@use "sass:meta" as meta;
// .lb-button
@mixin b($block) {
  $B: $namespace + "-" + $block;
  .#{$B} {
    @content;
  }
}

// .lb-button.is-xxx
@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

// &--primary => .lb-button--primary
@mixin m($modifier) {
  @at-root {
    #{& + $modifier-separator + $modifier} {
      @content;
    }
  }
}

// &__header => .lb-button__header
@mixin e($elements) {
  // 确保 $elements 始终是列表
  $list: if(meta.type-of($elements) == "list", $elements, ($elements));

  @each $element in $list {
    // 校验参数类型
    @if meta.type-of($element) != "string" {
      @error "Element name must be a string, got `#{inspect($element)}`.";
    }

    @at-root {
      // 拼接选择器：.block + "__" + "element"
      #{&}#{$element-separator}#{$element} {
        @content;
      }
    }
  }
}

/**
 * 生成 CSS 变量
 * @param {Map} $map
 * @example
 * $map: (
 *   color: red,
 *   size: 12px,
 *   padding: (
 *     top: 10px,
 *     right: 20px,
 *     bottom: 10px,
 *     left: 20px
 *   )
 * )
 */
@mixin generate-vars($map) {
  @each $key, $value in $map {
    @if type-of($value) == "map" {
      @include generate-vars("#{$prefix}-#{$key}", $value);
    } @else {
      --#{config.$namespace}-#{$key}: #{$value};
    }
  }
}